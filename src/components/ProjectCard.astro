---
import type { CollectionEntry } from "astro:content";

import ChipList from "./ChipList.astro";

interface Props {
    project: CollectionEntry<"project">;
}

/**
 * Parses a project's tech stack into a list of techs to be displayed in the preview card.
 *
 * @param techs the tech stack of the project
 * @returns a list of techs to be displayed in the preview card
 */
const parsePreviewTechs = (
    techs: CollectionEntry<"project">["data"]["techStack"]
): string[] => {
    if (!techs) {
        return [];
    }

    // TODO: maybe have a separate type for techs ???
    let previewTechs: string[] = [];

    if (Array.isArray(techs)) {
        previewTechs = previewTechs.concat(techs);
    } else {
        previewTechs = previewTechs.concat(techs.backend, techs.frontend);
    }

    return previewTechs.sort().slice(0, 5);
};

const { project: projectMetadata } = Astro.props;

const project = projectMetadata.data;
---

<article id=`project-card-${projectMetadata.slug}` class="project-card">
    <a href={project.upstreamLink}>
        <img
            class="preview-image"
            src={project.previewImage}
            alt=`Preview image for ${project.name}`
        />
        <section class="project-data">
            <header>
                <h2>{project.name}</h2>
                {
                    project.shortDescription ? (
                        <p>{project.shortDescription}</p>
                    ) : null
                }
            </header>
            <ChipList labels={parsePreviewTechs(project.techStack)} />
        </section>
    </a>
</article>
<style>
    :root {
        --card-elevation: 0;
        --member-link-elevation: 5;

        --card-border-radius: 1rem;
        --text-color: var(--color-4);
    }

    .project-card {
        max-width: 70%;
        min-height: 400px;

        border-radius: var(--card-border-radius);

        background-color: var(--color-bg);
        box-shadow: 0 0 0.5rem var(--color-shadow);

        color: var(--text-color);

        transition: box-shadow 0.2s ease-in-out;
    }

    .project-card a {
        display: flex;
        flex-direction: column;
        position: relative;

        height: 100%;

        justify-content: space-between;
    }

    .project-card .preview-image {
        width: 100%;
        border-radius: var(--card-border-radius) var(--card-border-radius) 0 0;

        flex: 0 1 auto;

        object-fit: cover;

        /* to handle the case where the images could not be loaded and the alt text appears */
        text-align: center;
    }

    .project-card .project-data {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        flex: 1 1 auto;

        justify-content: center;
        align-items: center;
        align-content: center;

        padding: 1rem;
    }

    .project-card .project-data header {
        flex: 1 1 auto;
        width: 100%;
    }
</style>
